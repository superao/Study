// 区分继承与组合的优缺点
#include <iostream>
using namespace std;

// 继承(is-a关系)
class Car
{
  public:
    void Run()
    {
      cout << "汽车是可以飞快的跑~~~" << endl;
    }

  protected:
    string _color;
};

class Benz : public Car
{
  public:
    void Myfunction()
    {
      cout << "舒适的环境" << endl;
    }

};

class BWM : public Car 
{
  public:
    void Myfunction()
    {
      cout << "专业的操控" << endl;
    }

};
// 这里体现的是一种 "白箱" 复用。
// 优点:
//    1.代码的复用，可以扩展父类没有实现的代码(当然组合也可以)
// 缺点:
//    1.继承是一种 "白箱" 复用 ，父类暴漏自己的某些成员以及函数，破化了类的封装性
//    2.继承之间的耦合度较高，子类会随着父类逻辑的修改而改变，后期非常的难维护，代码灵活度低
//    3.继承是一种静态的复用，由于子类继承父类的东西时无法满足多态的条件，因此上，子类继承父类的东西都是明确的，它在编译时期就确定了程序的执行逻辑，没有灵活性

// 组合(has-a关系)
class wheel
{
  public:
    bool stability()
    {
      cout << "稳定系统正常" << endl;
      return true;
    }

};

class Car1
{
  public:
    void Run()
    {
      cout << "汽车是可以飞快的跑~~~" << endl;
    }

  protected:
    wheel* _pwheel;
};
// 这里体现的是一种 "黑箱" 复用。
// 优点:
//    1."黑箱" 复用，组合成员的成员以及方法不向外界暴露，保证了类的封装性。
//    2.类与类之间的耦合度较低，一个类的改变并不影响其他类的逻辑，方便后期维护。
//    3.组合是一种动态的复用，我们在组合复用的时候有可能会构成多态的条件，因此在运行时，我们可以通过不同的对象调用不同的函数(多态)，比如：某个成员对象是一个具有多个子类的父类对象的 **指针/引用**，那么这时候我们调用某个函数，这时候就有可能体现动态复用。继承就体现不了。
// 缺点:
//    1.组合对象较多时，整体逻辑框架很难体现出来

int main()
{
  return 0;
}

// 总结：
// 经过上述的分析我们发现，组合的优点是明显的多余继承的，因此上，在没有某些特别强 is-a 的关系下我们尽可能的使用组合。 
